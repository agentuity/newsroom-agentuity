import type { PodcastTranscript } from "./data/old/podcast";

/**
 * Posts a podcast update to Slack with the audio link and story list
 */
export async function postPodcastToSlack(
	webhookUrl: string,
	podcast: PodcastTranscript,
	audioUrl?: string,
): Promise<void> {
	const audioLink = audioUrl || podcast.audio_url;
	if (!audioLink) {
		throw new Error("No audio URL available for the podcast");
	}

	const message = {
		blocks: [
			{
				type: "header",
				text: {
					type: "plain_text",
					text: "üéôÔ∏è Agentuity News Podcast üéôÔ∏è",
					emoji: true,
				},
			},
			{
				type: "context",
				elements: [
					{
						type: "mrkdwn",
						text: `*${new Date().toLocaleDateString()}*  |  Latest News Roundup`,
					},
				],
			},
			{
				type: "divider",
			},
			{
				type: "section",
				text: {
					type: "mrkdwn",
					text: "üì¢ *NEW EPISODE AVAILABLE* üì¢",
				},
			},
			{
				type: "section",
				text: {
					type: "mrkdwn",
					text: `Listen to our latest AI-powered news podcast covering the most important stories of the day.\n\n*Listen Now:* <${audioLink}|Click to play podcast>`,
				},
			},
			{
				type: "divider",
			},
			{
				type: "section",
				text: {
					type: "mrkdwn",
					text: "üì∞ *STORIES COVERED* üì∞",
				},
			},
		],
	};

	// Add story sections if they exist
	if (podcast.stories && podcast.stories.length > 0) {
		for (const story of podcast.stories) {
			message.blocks.push({
				type: "section",
				text: {
					type: "mrkdwn",
					text: `‚Ä¢ <${story.link}|${story.headline}>`,
				},
			});
		}
	}

	// Add footer
	message.blocks.push(
		{
			type: "divider",
		},
		{
			type: "context",
			elements: [
				{
					type: "mrkdwn",
					text: "ü§ñ Generated by Agentuity AI News",
				},
			],
		},
	);

	try {
		const response = await fetch(webhookUrl, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify(message),
		});

		if (!response.ok) {
			const errorText = await response.text();
			throw new Error(
				`Failed to post to Slack: ${response.statusText}. Details: ${errorText}`,
			);
		}
	} catch (error) {
		console.error("Error posting podcast to Slack:", error);
		throw error;
	}
}
